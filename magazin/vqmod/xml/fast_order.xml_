<modification>

    <id>Fast order</id>
    <version>1.0.0</version>
    <vqmver>2.1.5</vqmver>
    <author>Demeter Attila</author>

    <file name="catalog/controller/account/account.php">
        <operation>
            <search position="after"><![CDATA[$this->data['text_list_reclamation'] = $this->language->get( 'text_list_reclamation' );]]></search>
            <add><![CDATA[        $this->data['text_fast_order'] = $this->language->get( 'text_fast_order' );]]></add>
        </operation>
        <operation>
            <search position="after"><![CDATA[$this->data['mailbox'] = $this->url->link( 'mailbox/mailbox', '', 'SSL' );]]></search>
            <add><![CDATA[        $this->data['fast_order'] = $this->url->link( 'account/account/fast_order', '', 'SSL' );]]></add>
        </operation>
        <operation>
            <search position="before"><![CDATA[protected function validate() {]]></search>
            <add><![CDATA[
    public function fast_order() {
        //die('Coming soon ...');
        if( !$this->customer->isLogged() ) {
            $this->session->data['redirect'] = $this->url->link( 'account/account', '', 'SSL' );
            $this->redirect( $this->url->link( 'account/login', '', 'SSL' ) );
        }

        $this->load->model( 'tool/image' );

        $this->language->load('total/sub_total');
        $this->language->load('total/total');
        $this->language->load('account/account');
        $this->language->load('product/product');
        $this->language->load('checkout/cart');
        $this->language->load('account/fast_order');

        $this->data['column_image']         = $this->language->get( 'column_image' );
        $this->data['filter_name']          = $this->language->get( 'filter_name' );
        $this->data['filter_model']         = $this->language->get( 'filter_model' );
        $this->data['filter_color']         = $this->language->get( 'filter_color' );
        $this->data['filter_size']          = $this->language->get( 'filter_size' );
        $this->data['filter_config']        = $this->language->get( 'filter_config' );
        $this->data['filter_stoc']          = $this->language->get( 'filter_stoc' );
        $this->data['filter_price']         = $this->language->get( 'filter_price' );
        $this->data['filter_quantity']      = $this->language->get( 'filter_quantity' );
        $this->data['filter_total_price']   = $this->language->get( 'filter_total_price' );
        $this->data['button_add_to_list']   = $this->language->get( 'button_add_to_list' );

        $this->data['select_color']   = $this->language->get( 'select_color' );
        $this->data['select_size']   = $this->language->get( 'select_size' );

        $this->data['button_remove'] = $this->language->get( 'button_remove' );

        $taxes = $this->cart->getTaxes();

        $this->data['text_sub_total'] = $this->language->get('text_sub_total');
        //$this->data['text_tax'] = $this->db->query("SElECT * FROM `oc_tax_rate` WHERE `tax_rate_id` = ".key($taxes).";")->row['name'];
        $this->data['text_tax'] = $this->db->query("SElECT * FROM `oc_tax_rate` WHERE `tax_rate_id` = 86;")->row['name'];
        $this->data['text_total'] = $this->language->get('text_total');

        $this->document->setTitle( $this->language->get( 'text_fast_order' ) );
        $this->data['heading_title'] = $this->language->get( 'text_fast_order' );

        $this->data['breadcrumbs'] = array( );

        $this->data['breadcrumbs'][] = array(
            'text' => $this->language->get( 'text_home' ),
            'href' => $this->url->link( 'common/home' ),
            'separator' => false
        );

        $this->data['breadcrumbs'][] = array(
            'text' => $this->language->get( 'text_account' ),
            'href' => $this->url->link( 'account/account', '', 'SSL' ),
            'separator' => $this->language->get( 'text_separator' )
        );

        //echo "<pre>"; print_r($this->data); die('fsvds');

        if( file_exists( DIR_TEMPLATE.$this->config->get( 'config_template' ).'/template/account/fast_order.tpl' ) )
        {
            $this->template = $this->config->get( 'config_template' ).'/template/account/fast_order.tpl';
        }
        else
        {
            $this->template = 'default/template/account/fast_order.tpl';
        }

        $this->children = array(

        'common/dream_column_header_top', 'common/dream_column_header_bottom', 'common/dream_column_footer_top', 'common/dream_column_footer_bottom',

            'common/column_left',
            'common/column_right',
            'common/content_top',
            'common/content_bottom',
            'common/footer',
            'common/header'
        );

        $this->response->setOutput( $this->render() );
    }

    public function autocomplete() {
		$json = array();

		if (isset($this->request->get['filter_name']) || isset($this->request->get['filter_model'])) {
			$this->load->model('catalog/product');
			$this->load->model('catalog/option');

			$this->language->load('account/fast_order');

			if (isset($this->request->get['filter_name'])) {
				$filter_name = $this->request->get['filter_name'];
			} else {
				$filter_name = '';
			}

			if (isset($this->request->get['filter_model'])) {
				$filter_model = $this->request->get['filter_model'];
			} else {
				$filter_model = '';
			}

			if (isset($this->request->get['limit'])) {
				$limit = $this->request->get['limit'];
			} else {
				$limit = 20;
			}

			$data = array(
				'filter_name'  => $filter_name,
				'filter_model' => $filter_model,
				'start'        => 0,
				'limit'        => $limit
			);

			//echo "<pre>"; print_r($data); die('sdvs');

			$results = $this->model_catalog_product->getProducts($data);

			foreach ($results as $result) {
				$option_data = array();

				$product_options = $this->model_catalog_product->getProductOptions($result['product_id']);

				foreach ($product_options as $product_option) {
					$option_info = $this->model_catalog_option->getOption($product_option['option_id']);

					if ($option_info) {
						if ($option_info['type'] == 'select' || $option_info['type'] == 'radio' || $option_info['type'] == 'checkbox' || $option_info['type'] == 'image') {
							$option_value_data = array();

							foreach ($product_option['option_value'] as $product_option_value) {
								$option_value_info = $this->model_catalog_option->getOptionValue($product_option_value['option_value_id']);

								if ($option_value_info) {
									$option_value_data[] = array(
										'product_option_value_id' => $product_option_value['product_option_value_id'],
										'option_value_id'         => $product_option_value['option_value_id'],
										'name'                    => $option_value_info['name'],
										'price'                   => (float)$product_option_value['price'] ? $this->currency->format($product_option_value['price'], $this->config->get('config_currency')) : false,
										'price_prefix'            => $product_option_value['price_prefix']
									);
								}
							}

							if($product_option['option_id'] == 1) {
					            $place_holder = $this->language->get( 'select_size' );
							} elseif($product_option['option_id'] == 2) {
							    $place_holder = $this->language->get( 'select_color' );
							}

							$option_data[] = array(
								'product_option_id' => $product_option['product_option_id'],
								'option_id'         => $product_option['option_id'],
								'name'              => $option_info['name'],
								'type'              => $option_info['type'],
								'place_holder'      => $place_holder,
								'option_value'      => $option_value_data,
								'required'          => $product_option['required']
							);
						} else {
							$option_data[] = array(
								'product_option_id' => $product_option['product_option_id'],
								'option_id'         => $product_option['option_id'],
								'name'              => $option_info['name'],
								'type'              => $option_info['type'],
								'option_value'      => $product_option['option_value'],
								'required'          => $product_option['required']
							);
						}
					}
				}

				$json[] = array(
					'product_id' => $result['product_id'],
					'name'       => strip_tags(html_entity_decode($result['name'], ENT_QUOTES, 'UTF-8')),
					'model'      => $result['model'],
					'option'     => $option_data,
					'price'      => $result['price']
				);
			}
		}

		$this->response->setOutput(json_encode($json));
	}

	public function getProductOptions() {

	    if (isset($this->request->get['product_id']) && !empty($this->request->get['product_id'])) {

	        $this->load->model('catalog/product');
	        $product_options = $this->model_catalog_product->getProductOptions($this->request->get['product_id']);

	        foreach ($product_options as $option) {
				if ($option['type'] == 'select' || $option['type'] == 'radio' || $option['type'] == 'checkbox' || $option['type'] == 'image') {
					$option_value_data = array();

					foreach ($option['option_value'] as $option_value) {

						if (!$option_value['subtract'] || ($option_value['quantity'] >= 0)) {
							if ((($this->config->get('config_customer_price') && $this->customer->isLogged()) || !$this->config->get('config_customer_price')) && (float)$option_value['price']) {
								$price = $this->currency->format($this->tax->calculate($option_value['price'], $product_info['tax_class_id'], $this->config->get('config_tax')));
							} else {
								$price = false;
							}

							$option_value_data[] = array(
								'product_option_value_id' => $option_value['product_option_value_id'],
								'option_value_id'         => $option_value['option_value_id'],
								'name'                    => $option_value['name'],
								'price'                   => $price,
								'price_prefix'            => $option_value['price_prefix']
							);
						}
					}

					$options[] = array(
						'product_option_id' => $option['product_option_id'],
						'option_id'         => $option['option_id'],
						'name'              => $option['name'],
						'type'              => $option['type'],
						'option_value'      => $option_value_data,
						'required'          => $option['required']
					);
				} elseif ($option['type'] == 'text' || $option['type'] == 'textarea' || $option['type'] == 'file' || $option['type'] == 'date' || $option['type'] == 'datetime' || $option['type'] == 'time') {
					$options[] = array(
						'product_option_id' => $option['product_option_id'],
						'option_id'         => $option['option_id'],
						'name'              => $option['name'],
						'type'              => $option['type'],
						'option_value'      => $option['option_value'],
						'required'          => $option['required']
					);
				}
			}
			echo json_encode($options);
	    }
	}
            ]]></add>
        </operation>
    </file>

</modification>